The showMessage() function accepts an input element, a message, and a type:
// show a message with a type of the input
function showMessage(input, message, type) {
	// get the <small> element and set the message
	const msg = input.parentNode.querySelector("small");
	msg.innerText = message;
	// update the class for the input
	input.className = type ? "success" : "error";
	return type;
}

The following shows the name input field on the form:
<div class="field">
	<label for="name">Name:</label>
	<input type="text" id="name" name="name" placeholder="Enter your fullname" />
	<small></small>
</div>

---------------------------------------------------

If the name’s value is blank, you need to get its parent first which is the <div> with the class “field”.

    input.parentNode
----------------------------------------------------------
Next, you need to select the <small> element:
    const msg = input.parentNode.querySelector("small");
----------------------------------------------------------
Then, update the message:
    msg.innerText = message;
----------------------------------------------------------
After that, we change the CSS class of the input field based on the value of the type parameter. If the type is true, we change the class of the input to success. Otherwise, we change the class to error.
    input.className = type ? "success" : "error";
----------------------------------------------------------
Finally, return the value of the type:
    return type;

----------------------------------------

The showError() and showSuccess() functions
The the showError() and showSuccess() functions call the showMessage() function. The showError() function always returns false whereas the showSuccess() function always returns true. Also, the showSuccess() function sets the error message to an empty string.

function showError(input, message) {
	return showMessage(input, message, false);
}

function showSuccess(input) {
	return showMessage(input, "", true);
}
----------------------------------------------------------
The hasValue() function
The hasValue() function checks if an input element has a value or not and show an error message using the showError() or showSuccess() function accordingly:

function hasValue(input, message) {
	if (input.value.trim() === "") {
		return showError(input, message);
	}
	return showSuccess(input);
}

----------------------------------------------------------
The validateEmail() function
The validateEmail() function validates if an email field contains a valid email address:

function validateEmail(input, requiredMsg, invalidMsg) {
	// check if the value is not empty
	if (!hasValue(input, requiredMsg)) {
		return false;
	}
	// validate email format
	const emailRegex =
		/^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;

	const email = input.value.trim();
	if (!emailRegex.test(email)) {
		return showError(input, invalidMsg);
	}
	return true;
}

The validateEmail() function calls the hasValue() function to check if the field value is empty. If the input field is empty, it shows the requiredMsg.

To validate the email, it uses a regular expression. If the email is invalid, the validateEmail() function shows the invalidMsg.
----------------------------------------------------------
The submit event handler
First, select the signup form by its id using the querySelector() method:


const form = document.querySelector("#signup");

Second, define some constants to store the error messages:

const NAME_REQUIRED = "Please enter your name";
const EMAIL_REQUIRED = "Please enter your email";
const EMAIL_INVALID = "Please enter a correct email address format";

--------------------------------------------------------------

Third, add the submit event listener of the signup form using the addEventListener() method:

form.addEventListener("submit", function (event) {
	// stop form submission
	event.preventDefault();

	// validate the form
	let nameValid = hasValue(form.elements["name"], NAME_REQUIRED);
	let emailValid = validateEmail(form.elements["email"], EMAIL_REQUIRED, EMAIL_INVALID);
	// if valid, submit the form.
	if (nameValid && emailValid) {
		alert("Demo only. No form was posted.");
	}
});

In the submit event handler:

Stop the form submission by calling the event.preventDefault() method.
Validate the name and email fields using the hasValue() and validateEmail() functions.
If both name and email are valid, show an alert. In a real-world application, you need to call the form.submit() method to submit the form.

-----------------------------------------------------------
Summary
Use the <form> element to create an HTML form.
Use DOM methods such as getElementById() and querySelector() to select a <form> element. The document.forms[index] also returns the form element by a numerical index.
Use form.elements to access form elements.
The submit event fires when users click the submit button on the form.
-----------------------------------------------------------
