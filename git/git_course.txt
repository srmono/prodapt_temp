What is Git?
Git is distributed version control system. It allows for multiple programmers to work on the same project.

If you intend to work in data science, quantitative analysis, or any role that requires programmers or coders collaborating, you will probably have to cross paths with it. 
At first Git can be quite intimidating to learn. It can also be quite confusing. This gentle tutorial will hopefully alleviate you from some of these fears.

	bitbucket
	gitlab
git -> github
---------------------
Setting up Git
First, you can download Git from the website below.

https://git-scm.com/

--------------------

Launch Git bash after installing it. Firstly, check the version of Git you have. Mine is shown below.

git --version

--

Version control system : track & work together

VCS: version control system

VCS are two types, centralized and distributed

Git is distributed
Why Git?
Free
Open Source
Super Fast
Scalable


Using GIT
The Command Line
Code Editors & IDE's vs code git lens exten
Graphical User Interfaces (GUI)
	GitKraken GUI tool
	Source Tree

Why command lines
gui always has limitations

-----------------

Git configuration: 
git config -h
setting: 
	Name
	Email
	Default Editor
	Line Ending

SYSTEM: All Users
GLOBAL: All Repositories of the current User
LOCAL: The current Repository

we have different configs/setting for different projects 

git config --global user.name "Name"
git config --global user.email "Name@gmail.com"
git config --list

Config:
User Config: git config --global user.name "srmono"
Email Config: config --global user.email bvsrao91@gmail.com
Editor Config: git config --global core.editor "code --wait"

--wait flag tells to terminal that wait until it set the vscode terminal

----------------------

Edit Config File: 
git config --global -e

----------------------------------------------

Newline issues to solve
ref attached in images, git1 and git2.png

Windows: git config --global core.autocrlf true

Mac: git config --global core.autocrlf input
	
---------------------------------------------------------
Config Help

git --help

git cheat sheet

//////////////////////////////////////////////////////////////////////////////////////////
git and github

git
	working directory
	stage
	git repo

git init -> initiate git repo

stage
unstage
restore
commit

Add files to Stage:
git add .	  : adds all files/directories to stage
git add filename
git add filename filename

Unstage: 
git rm --cached <file>... 

Practice:
modify file 
git status
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   file1.txt

Restore:
	git restore <file>...
commit to repo: 

git commit -m "message"
git remote add origin github_url
git push origin master

-------------------------------

git init -> initiate git repo
git add .
git commit -m "message"
git remote add origin github_url
git push origin master

Remove git:  rm -rf .git
//////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////

---------------

Before we commit to anything we can check the status of our project.

git status

--------------------------

Initialize git repository 

git init  : which initializes empty git seporatory 

By default .git repo is hidden

Type ls won't list anything

ls -a   : all flag

open git folder 

rm -rf .git : to remove git repo , don't do this 


GIT WORK FLOW:

git add file1 

git commit -m "give the comment of the commit" 


Each commit Contains 

COMMIT
ID : Uniuqe id generated by Git
Message:
Date/Time
Author
Complete Snapshot 

//STAGING FILES 
$ git status
On branch master

No commits yet

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        GitProject.sublime-project
        GitProject.sublime-workspace
        file1.txt
        file2.txt

nothing added to commit but untracked files present (use "git add" to track)


To add files to staging

git add file1.txt file2.txt  

git add *.txt (pattern):  to match and add

git add .   : To add Entire directory

run again git status 


$ git status
On branch master

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)
        new file:   GitProject.sublime-project
        new file:   GitProject.sublime-workspace
        new file:   file1.txt
        new file:   file2.txt


Modify file 1 and run git status again

$ git status
On branch master

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)
        new file:   GitProject.sublime-project
        new file:   GitProject.sublime-workspace
        new file:   file1.txt
        new file:   file2.txt

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   file1.txt



Now add again the file1 sho git update the changes

git add file1.txt

Run again Git status to check the chnges

$ git status
On branch master

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)
        new file:   GitProject.sublime-project
        new file:   GitProject.sublime-workspace
        new file:   file1.txt
        new file:   file2.txt




///COMMITING THE CHANGES 
Now we have files in staging area 

git commit -m "Initial Commit." 

since we have already setup vscode is a editor for git initially, run following command to open commit edit message in editor

git commit : it opens in vscode

write comments and close file 

you can see following update in command prompt 

$ git commit
[master (root-commit) 3af7aa0] Initial Commit
 4 files changed, 818 insertions(+)
 create mode 100644 GitProject.sublime-project
 create mode 100644 GitProject.sublime-workspace
 create mode 100644 file1.txt
 create mode 100644 file2.txt



// BEST PRACTICES FOR COMMITNG CODE 

Commit Size Matters

XS : Small files 
M : medium files
XXL : Large files 
-------------------------------------
Skip stage and commit (works on existing files)
git commit -am "direct commit"

-am flag:  skip staging and commit, -a means all changes. 
-------------------------------


// REMOVING FILES 

rm file2.txt 

if you run git status, it will show the file2.txt is there in staging. , we removed in local folder only

run git ls-files it will return 2 files list

to remove from git also 

git add file2.txt 

and git ls-files it will return only one file 


git commit -m "Remove unused files"

now 
git status to check 



//RENAMING OR MOVING FILES: its a two step operation 


mv file1.txt main.js : changing 

git add file1.txt 

git add main.js 

git status 


// to make it in single line operation: git mv main.js file1.js 

git commit -m "refactor code"


// IGNORING FILES ANY SPECIFIC 

mkdir logs 

inside logs folder  dev.log file 

.gitignore 

logs/ 
main.log
*.log 

git add .gitignore

git commit -m "Add gitignore" 


////if you want to remove any files from staging,

git rm -h : to get help for remove

git rm --cached -r foldername 



git status -s to check details  

M: modified
A: Added 

MA

left is staging, right is working directory

///Viewing staged and unstaged files

git diff --staged  to check difference in the files 

git diff 

/// VISUAL DIFF TOOLS 
Kdiff3
P4Merge
Winmerge
VSCode

to set editor to see diff
git config --global diff.tool vscode

For command line setup to open
git config --global difftool.vscode.cmd "code --wait --diff $LOCAL $REMOTE"

git config --global -e : to open config file 

add $LOCAL $REMOTE in config file, else it wont work in system 


git difftool 


to check what files/changes in staging 
git difftool --staged 



////////////////////////////// VIEWING THE HISTORY


git log 

git log --oneline

git log --oneline --reverse


////////////////////////////////// VIEWING COMMIT: which commit what did 

git show 

git show refid/commit_id 

-----------------------------------



git add

git retore --staged file1.js


//DISCARDING LOCAL CHANGES

git restore file1.js 

git clean -h

///RESTORE FILES TO EARLIER VERSION

rm file1.js

git rm file.js to remove local and staging

git commig -m "removed "


git log --oneline


for restore help:  git restore -h

git restore --source=HEAD~1

----------------------------------------------------

git remote -v

This will give you information on your local repository. Furthermore,

-----------------------------------------------------

git branch

To add a new branch you can simply type:

git branch newBranch


If you want to switch branches you can see the checkout verb.

git checkout newBranch

Push new branch to github
	git push -u origin newBranch


--------------------

Merge Branches
To merge branches, you first have to merge your branch locally with your local master. Then you can push this up to the remote repository.

So first, you need to be in your local master:

git checkout master
git pull origin master
Then you can merge your branch into the master:

git merge newBranch

Then finally, you can push up to the remote repository:


-------------------------

Deleting Branches
Once we have pushed our changes from the branch to the master, we can delete our branch local:

git branch -d newBranch


We can also delete the branch from the remote repository:

git push origin --delete newBranch
We can check the branches left by:

git branch -a


------------------------------------

Putting it all together
Create a new branch to work on a new feature
git branch newFeature
git checkout newFeature
2. Work on code for the new feature

3. Check modifications we have made, add to staging directory and commit locally

git status
git add -A
git commit -m "New Features"
4. Push to remote repository

git push -u origin newFeature
5. Once everything is ok, merge to local master

git checkout master
git pull origin master
git merge newFeature
6. Push to remote repository

git push origin master


--------------------------------------

refer diagram

master
feature

from master

git merge --squash feature

git commit -m "feature and master merged"


check git logs
-----------------

approach with rebase

refer diagram

master
feature

from feature branch

git rebase master 


Merge commits
Will keep all commits history of the feature branch and move them into the master branch
Will add extra dummy commit.
Merge commits: retains all of the commits in your branch and interleaves them with commits on the base branch


Rebase and merge
Will append all commits history of the feature branch in the front of the master branch
Will NOT add extra dummy commit.
Rebase: This moves the entire feature branch to begin on the tip of the master branch, effectively incorporating all of the new commits in master


Squash and merge
Will group all feature branch commits into one commit then append it in the front of the master branch
Will add extra dummy commit.
Merge Squash: retains the changes but omits the individual commits from history


------------------------

git checkout stable
git merge --squash tmp
git commit -m "squash tmp"


git checkout tmp
git rebase -i stable



